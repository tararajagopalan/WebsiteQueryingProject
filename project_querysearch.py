# -*- coding: utf-8 -*-
"""project_querySearch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I8CZxNzWFEwE5c4EcbtCQvnvVbZxLsdB
"""

#INSTALLING PYMILVUS

!pip install -U pymilvus
!pip install --upgrade pymilvus
!pip install "pymilvus[model]"

#SETTING UP VECTOR DATA BASE: creating a database on the mounted google drive
#sets up data base in the milvus_demo.db file on google drive
from pymilvus import MilvusClient

milvus_client = MilvusClient("/content/drive/MyDrive/project_work.db")

milvus_client.describe_collection("project_collection")

from pymilvus import model

embedding_fn = model.DefaultEmbeddingFunction()

query_vectors = embedding_fn.encode_queries(["What is a Unicorn?"])


search_params = {
    "metric_type": "L2",          # or "IP" depending on your index
    "params": {"nprobe": 10}
}

print(len(query_vectors[0]))

milvus_client.describe_collection("project_collection")

search_params = {
    "metric_type": "L2",    # match your index metric
    "params": {"nprobe": 10}
}

#performs a semantic vector search using the query vector query_vectors
#searches within existing collection demo_collection and returns the top 2 similar results to the input query: query_vectors
res = milvus_client.search(
    collection_name="project_collection",
    data=query_vectors,
    anns_field="embedding",
    search_params = search_params,
    limit=2, #returns top 2 similar results
    output_fields=["text","FilePath","FileExtension"], #this is what you select -> in SQL: select text, subject from demo_collection where vector is similar to data

)

#2 relevant entries to the query are basically printed below
print(res)

#performs a semantic vector search using the query vector query_vectors
#searches within existing collection demo_collection and returns the top 2 similar results to the input query: query_vectors

query_vectors1 = embedding_fn.encode_queries(["How do I make brownies?"])

res1 = milvus_client.search(
    collection_name="project_collection",
    data=query_vectors1,
    anns_field="embedding",
    search_params = search_params,
    limit=2, #returns top 2 similar results
    output_fields=["text","FilePath","FileExtension"], #this is what you select -> in SQL: select text, subject from demo_collection where vector is similar to data

)

#2 relevant entries to the query are basically printed below
print(res1)

from pprint import pprint

#performs a semantic vector search using the query vector query_vectors
#searches within existing collection demo_collection and returns the top 2 similar results to the input query: query_vectors

query_vectors2 = embedding_fn.encode_queries(["Instructions on How to Dance"])

res2 = milvus_client.search(
    collection_name="project_collection",
    data=query_vectors2,
    anns_field="embedding",
    search_params = search_params,
    limit=1, #returns top 2 similar results
    output_fields=["text","FilePath","FileExtension"], #this is what you select -> in SQL: select text, subject from demo_collection where vector is similar to data

)

#2 relevant entries to the query are basically printed below
print(res2)
pprint(res2)

#performs a semantic vector search using the query vector query_vectors
#searches within existing collection demo_collection and returns the top 2 similar results to the input query: query_vectors

query_vectors3 = embedding_fn.encode_queries(["Advice for training a golden retriever"])

res3 = milvus_client.search(
    collection_name="project_collection",
    data=query_vectors3,
    anns_field="embedding",
    search_params = search_params,
    limit=2, #returns top 2 similar results
    output_fields=["text","FilePath","FileExtension"], #this is what you select -> in SQL: select text, subject from demo_collection where vector is similar to data

)

#2 relevant entries to the query are basically printed below
print(res3)

import os


#performs a semantic vector search using the query vector query_vectors
#searches within existing collection demo_collection and returns the top 2 similar results to the input query: query_vectors

query_vectors4 = embedding_fn.encode_queries(["Show me a house tour"])

res4 = milvus_client.search(
    collection_name="project_collection",
    data=query_vectors4,
    anns_field="embedding",
    search_params = search_params,
    limit=2, #returns top 2 similar results
    output_fields=["text","FilePath","FileExtension"], #this is what you select -> in SQL: select text, subject from demo_collection where vector is similar to data

)

#2 relevant entries to the query are basically printed below
print(res4)
innerRes4 = res4[0]

for dict in innerRes4:
  distance = dict.distance
  entityDict = dict.entity
  textSummary = entityDict.text
  FilePath = entityDict.FilePath
  FileExtension = entityDict.FileExtension
  print(distance)
  print("---------------------------")
  print(textSummary)
  print("---------------------------")
  print(FilePath)
  print("---------------------------")
  Filename = os.path.basename(FilePath)
  print(Filename)  # Output: House.mov
  print("---------------------------")
  print(FileExtension)

print("Query vector length:", len(query_vectors[0]))